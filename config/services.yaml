# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Re-enable these when you put files into these directories
# ---------------------------------------------------------
imports:
#    - { resource: 'form_wizards/**/*.php' }
#   - { resource: 'workflows/**/*' }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app_notify_api_key: '%env(string:APP_NOTIFY_API_KEY)%'
    app_smartlook_api_key: '%env(default::APP_SMARTLOOK_API_KEY)%'
    app_secret: '%env(APP_SECRET)%'

    admin_hostname: '%env(string:APP_ADMIN_HOSTNAME)%'
    frontend_hostname: '%env(string:APP_FRONTEND_HOSTNAME)%'

    screenshots.path: '%env(resolve:SCREENSHOTS_PATH)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $appEnvironment: '%env(APP_ENV)%'
            $appSmartlookApiKey: '%app_smartlook_api_key%'
#            $secret: '%app_secret%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    App\Command\ScreenshotsCommand:
        lazy: true
        arguments:
            $frontendHostname: '%frontend_hostname%'
            $screenshotsPath: '%screenshots.path%'

    Alphagov\Notifications\Client:
        factory: '@Ghost\GovUkCoreBundle\Utility\AlphagovNotify\ClientFactory'
        arguments:
            $apiKey: '%app_notify_api_key%'

    Ghost\GovUkCoreBundle\Security\GoogleIap\IapAuthenticator:
        arguments:
            $roleResolver: '@App\Security\IapRoleResolver'

    Symfony\Component\Security\Http\LoginLink\LoginLinkHandlerInterface $loginLinkHandler:
        '@security.authenticator.login_link_handler.main'

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
            - !service { class: PDO, factory: ['@database_connection', 'getNativeConnection'] }
            # If you get transaction issues (e.g. after login) uncomment the line below
            - { lock_mode: !php/const Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler::LOCK_ADVISORY }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
