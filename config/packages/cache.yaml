framework:
    cache:
        # Unique name of your app: used to compute stable namespaces for cache keys.
        #prefix_seed: your_vendor_name/app_name

        # The "app" cache stores to the filesystem by default.
        # The data in this cache should persist between deploys.
        # Other options include:

        # Redis
        #app: cache.adapter.redis
        #default_redis_provider: redis://localhost

        # APCu (not recommended with heavy random-write workloads as memory fragmentation can cause perf issues)
        #app: cache.adapter.apcu

        # Namespaced pools use the above "app" backend by default
        #pools:
            #my.dedicated.cache: null

#        pools:
#            cache.chained.fs_dbal:
#                adapters:
#                    - cache.adapter.filesystem
#                    - cache.adapter.doctrine_dbal

## This caused issues with maintenance mode. Result was cached in FS and DB. was able to manually
## invalidate DB cache, but not FS cache on AppEngine instance.
#        app: cache.chained.fs_dbal1

        app: cache.adapter.doctrine_dbal


services:
    # Override the default cache for rate_limiter as per https://symfony.com/doc/current/rate_limiter.html#storing-rate-limiter-state
    cache.rate_limiter:
        parent: 'cache.adapter.doctrine_dbal'
        tags: [{ name: 'cache.pool', namespace: 'rate-limiter' }]

    cache.messenger.restart_workers_signal:
        parent: 'cache.adapter.doctrine_dbal'
        tags: [{ name: 'cache.pool', namespace: 'messenger-restart-signal' }]
