security:
    access_decision_manager:
        strategy: unanimous
        allow_if_all_abstain: false

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        main:
            id: App\Security\UserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            host: '^%frontend_hostname%$'
            lazy: true
            provider: main
            remember_me:
                secret:   '%kernel.secret%' # required
                lifetime: 2592000 # 30 days in seconds
                always_remember_me: true
            login_link:
                check_route: app_login_check
                check_post_only: true
                lifetime: 604800
                max_uses: 1
                signature_properties: ['email']

                failure_handler: App\Security\EmailAuthenticationHandler
                success_handler: App\Security\EmailAuthenticationHandler
            entry_point: App\Security\EmailAuthenticationHandler
            logout:
                path: app_logout
                target: app_login

        admin:
            host: '^%admin_hostname%$'
            lazy: true
            stateless: true
            custom_authenticators:
                - Ghost\GovUkCoreBundle\Security\GoogleIap\IapAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # N.B. Don't force https for either of these, as it means we'll get a redirect...
        - { path: ^/_ah }
        - { host: '^%frontend_hostname%$', path: ^/cron }
        - { host: '^%frontend_hostname%$', path: '^/$', roles: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }
        - { host: '^%frontend_hostname%$', path: '^/accessibility-statement', roles: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }
        - { host: '^%frontend_hostname%$', path: '^/login', roles: PUBLIC_ACCESS, requires_channel: '%env(SECURE_SCHEME)%' }
        - { host: '^%frontend_hostname%$', roles: ROLE_USER, requires_channel: '%env(SECURE_SCHEME)%' }
        - { host: '^%admin_hostname%$', roles: ROLE_ADMIN, requires_channel: '%env(SECURE_SCHEME)%' }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
