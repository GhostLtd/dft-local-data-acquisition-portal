{%- extends 'frontend/base.html.twig' -%}

{%- set page_title = breadcrumbBuilder.titleFor('project_return') -%}
{%- set page_heading_class = 'govuk-heading-m' -%}

{%- block content -%}
    {% from "@GhostGovUkFrontend/components/macros.html.twig" import taskListStart, taskListEnd, taskListItem %}

    <h2 class="govuk-heading-s">{{ 'frontend.pages.project_return.project_level_details' | trans }}</h2>
    {{- taskListStart() -}}
    {{- _self.projectLevelSectionsList(_context, isDisplayedInExpensesList: false) -}}
    {{- taskListEnd() -}}

    <h2 class="govuk-heading-s">{{ 'frontend.pages.project_return.project_level_expenses' | trans }}</h2>
    {{- taskListStart() -}}
    {# We want to show some of the projectLevelSection items in the expenses area, because although they are not
       expenses in the entity sense, they ask financial questions that are expense-related.
    #}
    {{- _self.projectLevelSectionsList(_context, isDisplayedInExpensesList: true) -}}

    {%- for division in expenseDivisions -%}
        {%- set status = projectReturn.getStatusForSection(division) -%}
        {{- taskListItem({
            title: {text: division.label | trans},
            href: path('app_project_return_expense_edit', {fundReturnId: fundReturn.id, projectFundId: projectReturn.projectFund.id, divisionKey: division.key}),
            status: {tag: {
                text: "tags.#{status.value}.name" | trans,
                classes: "govuk-tag--" ~ ("tags.#{status.value}.colour" | trans),
            }},
        }, loop.index0) -}}
    {%- endfor -%}
    {{- taskListEnd() -}}
{% endblock %}

{% macro projectLevelSectionsList(context, isDisplayedInExpensesList) %}
    {%- from "@GhostGovUkFrontend/components/macros.html.twig" import taskListStart, taskListEnd, taskListItem -%}

    {%- set filteredConfigurations = context.projectLevelSectionsConfiguration | filter(c => c.isDisplayedInExpensesList == isDisplayedInExpensesList) -%}

    {%- for configuration in filteredConfigurations -%}
        {%- set section = configuration.section -%}
        {%- set status = context.projectReturn.getStatusForSection(section) -%}

        {{- taskListItem({
            title: {text: "sections.project.#{section.value}" | trans},
            href: path('app_project_return_edit', {fundReturnId: context.fundReturn.id, projectFundId: context.projectReturn.projectFund.id, section: section.value}),
            status: {tag: {
                text: "tags.#{status.value}.name" | trans,
                classes: "govuk-tag--" ~ ("tags.#{status.value}.colour" | trans),
            }},
        }, loop.index0) -}}
    {%- endfor -%}
{% endmacro %}