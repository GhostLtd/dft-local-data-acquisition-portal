{%- extends 'frontend/base.html.twig' -%}

{%- set page_title = linksBuilder.breadcrumbTitleFor('scheme') -%}
{%- set page_heading_class = 'govuk-heading-l' -%}

{%- block content -%}
    {%- from "@GhostGovUkFrontend/components/macros.html.twig" import summaryList -%}
    {%- from "frontend/macros.html.twig" import textValue, yesOrNoValue -%}

    <h2 class="govuk-heading-m">{{ 'frontend.pages.scheme.scheme_details' | trans }}</h2>

    {{- _self.schemeDetailsSummaryList(scheme) -}}

    {%- if scheme.hasFundByValue('CRSTS1') -%}
        <h2 class="govuk-heading-m">{{ 'frontend.pages.scheme.crsts.title' | trans }}</h2>
        {{- summaryList({
            rows: {
                ("frontend.pages.scheme.crsts.is_retained" | trans): yesOrNoValue(scheme.crstsData.retained),
                ("frontend.pages.scheme.crsts.previously_tcf" | trans): yesOrNoValue(scheme.crstsData.previouslyTcf),
            }
        }) -}}
    {%- endif -%}

    <p class="govuk-button-group">
        <a class="govuk-button" href="{{ path('app_scheme_edit', {authorityId: authority.id, schemeId: scheme.id}) }}">{{ 'frontend.pages.scheme.edit_scheme' | trans }}</a>
        {% if is_granted('CAN_DELETE_SCHEME', scheme) %}
            <a class="govuk-button govuk-button--warning" href="{{ path('app_scheme_delete', {authorityId: authority.id, schemeId: scheme.id}) }}">{{ 'frontend.pages.scheme.delete_scheme' | trans }}</a>
        {% endif %}
        <a class="govuk-link" href="{{ path('app_schemes_authority', {authorityId: authority.id}) }}">{{ 'frontend.pages.scheme.back_to_schemes' | trans }}</a>
    </p>
{%- endblock -%}


{%- macro schemeDetailsSummaryList(scheme, options) -%}
    {%- from "@GhostGovUkFrontend/components/macros.html.twig" import summaryList -%}
    {%- from "frontend/macros.html.twig" import textValue, yesOrNoValue -%}

    {%- set showFundList = options.showFundList ?? true -%}
    {%- set schemeReturn = options.schemeReturn ?? false -%}
    {{- summaryList({
        rows: {
            (schemeReturn ? 'scheme_return.ready_for_signoff' : ''): yesOrNoValue(schemeReturn.readyForSignoff ?? false),
            'scheme.scheme_identifier': scheme.schemeIdentifier,
            'scheme.name': scheme.name,
            'scheme.description': {html: scheme.description | escape | nl2br},
            'scheme.transport_mode': (scheme.transportMode.forDisplay ?? null) | trans,
            ((scheme.transportMode.activeTravel ?? false) ? '' : 'scheme.has_active_travel_elements'): (scheme.activeTravelElement.forDisplay ?? null) | trans,
            (showFundList ? 'scheme.funds' : ''): scheme.fundsAsString,
            (showFundList ? '': 'scheme_return.retained'): yesOrNoValue(scheme.crstsData.retained),
            (showFundList ? '': 'scheme_return.previously_tcf'): yesOrNoValue(scheme.crstsData.previouslyTcf),
        } | filter((v,k) => k is not empty) | map ((v,k) => {
            key: {text: "frontend.pages.#{k}" | trans},
            value: v is iterable ? v : {text: textValue(v)}
        })
    }) -}}
{%- endmacro -%}