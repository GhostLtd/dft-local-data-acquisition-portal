{%- extends 'frontend/base.html.twig' -%}

{%- set page_title = linksBuilder.breadcrumbTitleFor('scheme_return') -%}
{%- set page_heading_class = 'govuk-heading-l' -%}

{%- block content -%}
    {%- from "@GhostGovUkFrontend/components/macros.html.twig" import summaryListStart, summaryListEnd, summaryListRow -%}
    {%- from "frontend/macros.html.twig" import displayCardForReturn, displaySectionsAsTabs, bcr, date, enumText, money, onTrackRating, ratingTag, text, yesOrNo, expenseDivisionComments -%}

    {#- DETAILS --------------------------------------------------------------------------------------------------- -#}

    {# @var schemeReturn \App\Entity\SchemeReturn\CrstsSchemeReturn #}

    <div class="govuk-!-margin-bottom-9">
        <h2 class="govuk-heading-m">{{ 'frontend.pages.scheme_return.titles.scheme_details' | trans }}</h2>

        {%- set contents -%}
            {{- summaryListStart() -}}
            {{- yesOrNo('frontend.pages.scheme_return.retained', schemeReturn.scheme.crstsData.retained) }}
            {{- yesOrNo('frontend.pages.scheme_return.ready_for_signoff', schemeReturn.readyForSignoff) }}
            {{- summaryListEnd() -}}
        {%- endset %}

        {%- set statusActions = [] -%}

        {%- if is_granted('CAN_MARK_AS_READY', schemeReturn) -%}
            {%- set statusActions = statusActions|merge([
                {
                    text: 'frontend.pages.scheme_return.mark_as_ready_for_signoff' | trans,
                    visuallyHiddenText: ': ' ~ linksBuilder.breadcrumbTitleFor('scheme_return'),
                    href: path('app_scheme_return_mark_as_ready_for_signoff', {fundReturnId: fundReturn.id, schemeId: schemeReturn.scheme.id}),
                }
            ]) -%}
        {%- endif -%}
        {%- if is_granted('CAN_MARK_AS_NOT_READY', schemeReturn) -%}
            {%- set statusActions = statusActions|merge([
                {
                    text: 'frontend.pages.scheme_return.unmark_as_ready_for_signoff' | trans,
                    visuallyHiddenText: ': ' ~ linksBuilder.breadcrumbTitleFor('scheme_return'),
                    href: path('app_scheme_return_mark_as_not_ready_for_signoff', {fundReturnId: fundReturn.id, schemeId: schemeReturn.scheme.id}),
                }
            ]) -%}
        {%- endif -%}

        {{- displayCardForReturn(
            schemeReturn,
            'frontend.pages.scheme_return.titles.status' | trans,
            'status',
            contents,
            {
                add_edit_link: false,
                actions: statusActions,
            },
        ) -}}

        {%- set contents -%}
            {{- summaryListStart() -}}
            {{- text('frontend.pages.scheme_return.scheme_id', schemeReturn.scheme.schemeIdentifier) -}}
            {{- text('frontend.pages.scheme_return.description', schemeReturn.scheme.description) -}}
            {{- text('frontend.pages.scheme_return.risks', schemeReturn.scheme.risks) -}}
            {{- yesOrNo('frontend.pages.scheme_return.previously_tcf', schemeReturn.scheme.crstsData.previouslyTcf) -}}
            {{- bcr('frontend.pages.scheme_return.benefit_cost_ratio', schemeReturn.benefitCostRatio) }}
            {{- summaryListEnd() -}}
        {%- endset -%}

        {{- displayCardForReturn(
            schemeReturn,
            'frontend.pages.scheme_return.titles.main_details' | trans,
            'scheme_details',
            contents
        ) -}}

        {%- set contents -%}
            {{- summaryListStart() -}}
            {{- money('frontend.pages.scheme_return.total_cost', schemeReturn.totalCost) -}}
            {{- money('frontend.pages.scheme_return.agreed_funding', schemeReturn.agreedFunding) -}}
            {{- summaryListEnd() -}}
        {%- endset -%}

        {{- displayCardForReturn(
            schemeReturn,
            'frontend.pages.scheme_return.titles.overall_funding' | trans,
            'overall_funding',
            contents
        ) -}}

        {%- set contents -%}
            {{- summaryListStart() -}}

            {%- set transportCategory = schemeReturn.scheme.transportMode ? schemeReturn.scheme.transportMode.category.value : null -%}
            {%- set transportMode = schemeReturn.scheme.transportMode ? schemeReturn.scheme.transportMode.value : null -%}
            {%- set transportCategoryValue = transportCategory ? ("enum.transport_mode.categories.#{transportCategory}" | trans) : null -%}
            {%- set transportModeValue = transportMode ? ("enum.transport_mode.#{transportMode}" | trans) : null -%}
            {%- set html -%}
                {%- if transportModeValue -%}
                    {{ transportCategoryValue }}: {{ transportModeValue }}
                {%- else -%}
                    {{ '-' }}
                {%- endif -%}
            {%- endset -%}

            {{- text('frontend.pages.scheme_return.transport_mode', html) -}}

            {%- if transportCategory != 'active_travel' -%}
                {{- enumText('frontend.pages.scheme_return.has_active_travel_elements', 'enum.active_travel_element', schemeReturn.scheme.activeTravelElement) -}}
            {%- endif -%}
            {{- yesOrNo('frontend.pages.scheme_return.includes_charging_points', schemeReturn.scheme.includesChargingPoints) -}}
            {{- yesOrNo('frontend.pages.scheme_return.includes_clean_air_elements', schemeReturn.scheme.includesCleanAirElements) -}}
            {{- summaryListEnd() -}}
        {%- endset %}

        {{- displayCardForReturn(
            schemeReturn,
            'frontend.pages.scheme_return.titles.transport_mode' | trans,
            'transport_mode',
            contents
        ) -}}

    {#- MILESTONES ------------------------------------------------------------------------------------------------ -#}

    {%- set configs = [] -%}

    <div class="govuk-!-margin-bottom-9">
        <h2 class="govuk-heading-m">{{ 'frontend.pages.scheme_return.titles.milestones' | trans }}</h2>

        {%- set contents -%}
            {{- summaryListStart() -}}
            {{- onTrackRating('frontend.pages.scheme_return.on_track_rating', schemeReturn.onTrackRating) }}
            {{- text('frontend.pages.scheme_return.progress_update', schemeReturn.progressUpdate) }}
            {{- summaryListEnd() -}}
        {%- endset -%}

        {{- displayCardForReturn(
            schemeReturn,
            'frontend.pages.scheme_return.titles.milestone_progress' | trans,
            'milestone_progress',
            contents
        ) -}}

        {%- set contents -%}
            {{- summaryListStart() -}}
            {%- for milestone in schemeReturn.milestones -%}
                {%- set label = ("enum.milestone_type.#{milestone.type.value}" | trans({funded_mostly_as: schemeReturn.scheme.crstsData.fundedMostlyAs.value})) -%}
                {{- date(label, milestone.date, {translateLabel: false}) -}}
            {%- endfor -%}
            {{- summaryListEnd() -}}
        {%- endset -%}

        {{- displayCardForReturn(
            schemeReturn,
            'frontend.pages.scheme_return.titles.milestone_dates' | trans,
            'milestone_dates',
            contents
        ) -}}

        {%- set contents -%}
            {{- summaryListStart() -}}
            {{- enumText('frontend.pages.scheme_return.current_business_case', 'enum.business_case', schemeReturn.businessCase) -}}
            {%- if schemeReturn.businessCase and schemeReturn.businessCase.value != 'not_applicable' -%}
                {{- date('frontend.pages.scheme_return.expected_business_case_approval', schemeReturn.expectedBusinessCaseApproval) -}}
            {%- endif -%}
            {{- summaryListEnd() -}}
        {%- endset -%}

        {{- displayCardForReturn(
            schemeReturn,
            'frontend.pages.scheme_return.titles.milestone_business_case' | trans,
            'milestone_business_case',
            contents
        ) -}}
    </div>

    {#- EXPENSES -------------------------------------------------------------------------------------------------- -#}

    {%- set sections = [] -%}

    {%- from "frontend/macros.html.twig" import renderTable -%}
    {%- for division in expenseDivisions -%}
        {%- set divisionConfiguration = schemeReturn.findDivisionConfigurationByKey(division.key) -%}
        {%- do expensesTableHelper.setDivisionConfiguration(divisionConfiguration) -%}
        {%- set contents -%}
            {%- set table = expensesTableCalculator.calculate(expensesTableHelper.getTable(), schemeReturn) -%}
            {%- if is_granted('CAN_EDIT', schemeReturn) -%}
                {%- set url = section_edit_path(schemeReturn, division.key, true) -%}
                <div class="expenses-links">
                    <a class="govuk-link" href="{{ url }}">{{ 'common.actions.edit' | trans }} <span class="govuk-visually-hidden">{{ division.label | trans }}</span></a>
                </div>
            {%- endif -%}
            {{- renderTable(table) -}}
            {{- expenseDivisionComments(schemeReturn, division) -}}
        {%- endset -%}
        {%- set sections = sections|merge([{
            label: division.label | trans,
            id: 'expenses-' ~ division.key,
            panel: {html: contents},
        }]) -%}
    {%- endfor -%}

    {{- displaySectionsAsTabs(sections, 'frontend.pages.scheme_return.titles.expenses' | trans) -}}

    <p class="govuk-body">
        <a href="{{ path('app_fund_return', {fundReturnId: fundReturn.id}) }}#scheme-list" class="govuk-link">{{-
            'frontend.pages.scheme_return.back_to_fund_return' | trans({fundName: "enum.fund.#{fundReturn.fundAward.type.name}" | trans})
        -}}</a>
    </p>
{%- endblock -%}
