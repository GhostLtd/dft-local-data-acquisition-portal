{%- extends 'frontend/base.html.twig' -%}

{%- set page_title = breadcrumbBuilder.titleFor('scheme_return') -%}
{%- set page_heading_class = 'govuk-heading-m' -%}

{%- block content -%}
    {% from "@GhostGovUkFrontend/components/macros.html.twig" import taskListStart, taskListEnd, taskListItem %}

    {%- set visibleSectionsInDetails = schemeLevelSectionsConfiguration
        | filter(c => c.displayGroup.value == 'details')
        | filter(c => is_granted('CAN_VIEW', {subject: schemeReturn, section: c.section.value}))
    -%}

    {%- if visibleSectionsInDetails is not empty -%}
        <h2 class="govuk-heading-s">{{ 'frontend.pages.scheme_return.scheme_level_details' | trans }}</h2>
        {{- taskListStart() -}}
        {{- _self.sectionsList(_context, visibleSectionsInDetails) -}}
        {{- taskListEnd() -}}
    {%- endif -%}

    {%- set visibleSectionsInExpenses = schemeLevelSectionsConfiguration
        | filter(c => c.displayGroup.value == 'expenses')
        | filter(c => is_granted('CAN_VIEW', {subject: schemeReturn, section: c.section.value}))
    -%}

    {%- set visibleExpenseDivisions = expenseDivisions | filter(d => is_granted('CAN_VIEW', {subject: schemeReturn, section: d.key})) %}

    {%- if visibleSectionsInExpenses is not empty
        or visibleExpenseDivisions is not empty
    -%}
        <h2 class="govuk-heading-s">{{ 'frontend.pages.scheme_return.scheme_level_expenses' | trans }}</h2>
        {{- taskListStart() -}}
        {# We want to show some of the schemeLevelSection items in the expenses area, because although they are not
           expenses in the entity sense, they ask financial questions that are expense-related.
        #}
        {{- _self.sectionsList(_context, visibleSectionsInExpenses) -}}

        {%- for division in visibleExpenseDivisions -%}
            {%- set status = schemeReturn.getStatusForSection(division) -%}
            {{- taskListItem({
                title: {text: division.label | trans},
                href: path('app_scheme_return_expense_edit', {fundReturnId: fundReturn.id, schemeFundId: schemeReturn.schemeFund.id, divisionKey: division.key}),
                status: {tag: {
                    text: "tags.#{status.value}.name" | trans,
                    classes: "govuk-tag--" ~ ("tags.#{status.value}.colour" | trans),
                }},
            }, loop.index0) -}}
        {%- endfor -%}
        {{- taskListEnd() -}}
    {%- endif -%}

    {%- set visibleSectionsInMilestones = schemeLevelSectionsConfiguration
        | filter(c => c.displayGroup.value == 'milestones')
        | filter(c => is_granted('CAN_VIEW', {subject: schemeReturn, section: c.section.value}))
    -%}

    {%- if visibleSectionsInMilestones is not empty -%}
        <h2 class="govuk-heading-s">{{ 'frontend.pages.scheme_return.scheme_level_milestones' | trans }}</h2>
        {{- taskListStart() -}}
        {{- _self.sectionsList(_context, visibleSectionsInMilestones) -}}
        {{- taskListEnd() -}}
    {%- endif -%}
{% endblock %}

{% macro sectionsList(context, configurations) %}
    {%- from "@GhostGovUkFrontend/components/macros.html.twig" import taskListStart, taskListEnd, taskListItem -%}

    {%- for configuration in configurations -%}
        {%- set section = configuration.section -%}
        {%- set status = context.schemeReturn.getStatusForSection(section) -%}

        {{- taskListItem({
            title: {text: "sections.scheme.#{section.value}" | trans},
            href: path('app_scheme_return_edit', {fundReturnId: context.fundReturn.id, schemeFundId: context.schemeReturn.schemeFund.id, section: section.value}),
            status: {tag: {
                text: "tags.#{status.value}.name" | trans,
                classes: "govuk-tag--" ~ ("tags.#{status.value}.colour" | trans),
            }},
        }, loop.index0) -}}
    {%- endfor -%}
{% endmacro %}